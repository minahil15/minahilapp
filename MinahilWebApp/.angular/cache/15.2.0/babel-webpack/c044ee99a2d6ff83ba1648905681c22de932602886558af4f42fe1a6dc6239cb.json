{"ast":null,"code":"import { EmployeeService } from '../shared/employee.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/employee.service\";\nexport class EmployeeComponent {\n  constructor(employeeService) {\n    this.employeeService = employeeService;\n  }\n  ngOnInit() {\n    this.resetForm();\n    this.refreshEmployeeList();\n  }\n  resetForm(form) {\n    if (form) form.reset();\n    this.employeeService.selectedEmployee = {\n      _id: \"\",\n      name: \"\",\n      position: \"\",\n      office: \"\",\n      salary: null\n    };\n  }\n  onSubmit(form) {\n    if (form.value._id == \"\") {\n      this.employeeService.postEmployee(form.value).subscribe(res => {\n        this.resetForm(form);\n        this.refreshEmployeeList();\n        M.toast({\n          html: 'Saved successfully',\n          classes: 'rounded'\n        });\n      });\n    } else {\n      this.employeeService.putEmployee(form.value).subscribe(res => {\n        this.resetForm(form);\n        this.refreshEmployeeList();\n        M.toast({\n          html: 'Updated successfully',\n          classes: 'rounded'\n        });\n      });\n    }\n  }\n  refreshEmployeeList() {\n    this.employeeService.getEmployeeList().subscribe(res => {\n      this.employeeService.employees = res;\n    });\n  }\n  onEdit(emp) {\n    this.employeeService.selectedEmployee = emp;\n  }\n  onDelete(_id, form) {\n    if (confirm('Are you sure to delete this record ?') == true) {\n      this.employeeService.deleteEmployee(_id).subscribe(res => {\n        this.refreshEmployeeList();\n        this.resetForm(form);\n        M.toast({\n          html: 'Deleted successfully',\n          classes: 'rounded'\n        });\n      });\n    }\n  }\n}\nEmployeeComponent.ɵfac = function EmployeeComponent_Factory(t) {\n  return new (t || EmployeeComponent)(i0.ɵɵdirectiveInject(i1.EmployeeService));\n};\nEmployeeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EmployeeComponent,\n  selectors: [[\"app-employee\"]],\n  features: [i0.ɵɵProvidersFeature([EmployeeService])],\n  decls: 2,\n  vars: 0,\n  template: function EmployeeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"employee works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAGA,SAASA,eAAe,QAAQ,4BAA4B;;;AAW5D,OAAM,MAAOC,iBAAiB;EAE5BC,YAAoBC,eAAgC;IAAhC,oBAAe,GAAfA,eAAe;EAAqB;EAExDC,QAAQ;IACN,IAAI,CAACC,SAAS,EAAE;IAChB,IAAI,CAACC,mBAAmB,EAAE;EAC5B;EAEAD,SAAS,CAACE,IAAa;IACrB,IAAIA,IAAI,EACNA,IAAI,CAACC,KAAK,EAAE;IACd,IAAI,CAACL,eAAe,CAACM,gBAAgB,GAAG;MACtCC,GAAG,EAAE,EAAE;MACPC,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE,EAAE;MACVC,MAAM,EAAE;KACT;EACH;EAEAC,QAAQ,CAACR,IAAY;IACnB,IAAIA,IAAI,CAACS,KAAK,CAACN,GAAG,IAAI,EAAE,EAAE;MACxB,IAAI,CAACP,eAAe,CAACc,YAAY,CAACV,IAAI,CAACS,KAAK,CAAC,CAACE,SAAS,CAAEC,GAAG,IAAI;QAC9D,IAAI,CAACd,SAAS,CAACE,IAAI,CAAC;QACpB,IAAI,CAACD,mBAAmB,EAAE;QAC1Bc,CAAC,CAACC,KAAK,CAAC;UAAEC,IAAI,EAAE,oBAAoB;UAAEC,OAAO,EAAE;QAAS,CAAE,CAAC;MAC7D,CAAC,CAAC;KACH,MACI;MACH,IAAI,CAACpB,eAAe,CAACqB,WAAW,CAACjB,IAAI,CAACS,KAAK,CAAC,CAACE,SAAS,CAAEC,GAAG,IAAI;QAC7D,IAAI,CAACd,SAAS,CAACE,IAAI,CAAC;QACpB,IAAI,CAACD,mBAAmB,EAAE;QAC1Bc,CAAC,CAACC,KAAK,CAAC;UAAEC,IAAI,EAAE,sBAAsB;UAAEC,OAAO,EAAE;QAAS,CAAE,CAAC;MAC/D,CAAC,CAAC;;EAEN;EAEAjB,mBAAmB;IACjB,IAAI,CAACH,eAAe,CAACsB,eAAe,EAAE,CAACP,SAAS,CAAEC,GAAG,IAAI;MACvD,IAAI,CAAChB,eAAe,CAACuB,SAAS,GAAGP,GAAiB;IACpD,CAAC,CAAC;EACJ;EAEAQ,MAAM,CAACC,GAAa;IAClB,IAAI,CAACzB,eAAe,CAACM,gBAAgB,GAAGmB,GAAG;EAC7C;EAEAC,QAAQ,CAACnB,GAAW,EAAEH,IAAY;IAChC,IAAIuB,OAAO,CAAC,sCAAsC,CAAC,IAAI,IAAI,EAAE;MAC3D,IAAI,CAAC3B,eAAe,CAAC4B,cAAc,CAACrB,GAAG,CAAC,CAACQ,SAAS,CAAEC,GAAG,IAAI;QACzD,IAAI,CAACb,mBAAmB,EAAE;QAC1B,IAAI,CAACD,SAAS,CAACE,IAAI,CAAC;QACpBa,CAAC,CAACC,KAAK,CAAC;UAAEC,IAAI,EAAE,sBAAsB;UAAEC,OAAO,EAAE;QAAS,CAAE,CAAC;MAC/D,CAAC,CAAC;;EAEN;;AAxDWtB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAA+B;EAAAC,iCAFjB,CAACjC,eAAe,CAAC;EAAAkC;EAAAC;EAAAC;IAAA;MCZ9BC,yBAAG;MAAAA,+BAAe;MAAAA,iBAAI","names":["EmployeeService","EmployeeComponent","constructor","employeeService","ngOnInit","resetForm","refreshEmployeeList","form","reset","selectedEmployee","_id","name","position","office","salary","onSubmit","value","postEmployee","subscribe","res","M","toast","html","classes","putEmployee","getEmployeeList","employees","onEdit","emp","onDelete","confirm","deleteEmployee","selectors","features","decls","vars","template","i0"],"sourceRoot":"","sources":["E:\\Semester 8\\Web Tech\\MEAN STACK\\Project\\UzairWebApp\\src\\app\\employee\\employee.component.ts","E:\\Semester 8\\Web Tech\\MEAN STACK\\Project\\UzairWebApp\\src\\app\\employee\\employee.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\nimport { EmployeeService } from '../shared/employee.service';\nimport { Employee } from '../shared/employee.model';\n\ndeclare var M: any;\n\n@Component({\n  selector: 'app-employee',\n  templateUrl: './employee.component.html',\n  styleUrls: ['./employee.component.css'],\n  providers: [EmployeeService]\n})\nexport class EmployeeComponent implements OnInit {\n\n  constructor(private employeeService: EmployeeService) { }\n\n  ngOnInit() {\n    this.resetForm();\n    this.refreshEmployeeList();\n  }\n\n  resetForm(form?: NgForm) {\n    if (form)\n      form.reset();\n    this.employeeService.selectedEmployee = {\n      _id: \"\",\n      name: \"\",\n      position: \"\",\n      office: \"\",\n      salary: null\n    }\n  }\n\n  onSubmit(form: NgForm) {\n    if (form.value._id == \"\") {\n      this.employeeService.postEmployee(form.value).subscribe((res) => {\n        this.resetForm(form);\n        this.refreshEmployeeList();\n        M.toast({ html: 'Saved successfully', classes: 'rounded' });\n      });\n    }\n    else {\n      this.employeeService.putEmployee(form.value).subscribe((res) => {\n        this.resetForm(form);\n        this.refreshEmployeeList();\n        M.toast({ html: 'Updated successfully', classes: 'rounded' });\n      });\n    }\n  }\n\n  refreshEmployeeList() {\n    this.employeeService.getEmployeeList().subscribe((res) => {\n      this.employeeService.employees = res as Employee[];\n    });\n  }\n\n  onEdit(emp: Employee) {\n    this.employeeService.selectedEmployee = emp;\n  }\n\n  onDelete(_id: string, form: NgForm) {\n    if (confirm('Are you sure to delete this record ?') == true) {\n      this.employeeService.deleteEmployee(_id).subscribe((res) => {\n        this.refreshEmployeeList();\n        this.resetForm(form);\n        M.toast({ html: 'Deleted successfully', classes: 'rounded' });\n      });\n    }\n  }\n\n}\n","<p>employee works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}